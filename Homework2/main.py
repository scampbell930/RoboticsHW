import sim
import time
from sympy import Point, Segment


if __name__ == '__main__':
    # Close any running sims
    sim.simxFinish(-1)

    # Connect to Coppelia client
    clientID = sim.simxStart('127.0.0.1', 19997, True, True, 5000, 5)

    # Check connection
    if clientID != -1:
        print("Connected to remote API server")
    else:
        print("Not connected to remote API server")

    nodes = [[1, -11.925, 10.05], [2, -11.9, -7.125], [3, -9.95, -7.1], [4, -9.975, -6.225], [5, -11.925, -6.15],
             [6, -11.975, -4.4], [7, -9.075, -7.125], [8, -9.125, -10.15], [9, -7.35, -10.15], [10, -10.9, -10.125],
             [11, -10.9, -8.15], [12, -8.17, -7.125], [13, -8.125, -8.025], [14, -7.257, -8.1], [15, -7.25, -6.15],
             [16, -8.25, -6.1], [17, -8.4, -5.125], [18, -9.95, -5.125], [19, -10, -3.35], [20, -10.9, -3.4],
             [21, -10.9, -4.025], [22, -7.125, -5.8], [23, -6.275, -5.85], [24, -6.2, -7.35], [25, -4, -7.35],
             [26, -4, -9.2], [27, -5.125, -9.2], [28, -5.125, -8.45], [29, -4.05, -6.45], [30, -4.05, -5.175],
             [31, -2.97, -5.2], [32, -2.97, -10.175], [33, -6.25, -10.175], [34, -6.25, -9.025], [35, -8.1, -9.025],
             [36, -5.075, -6.425], [37, -5.075, -3.775], [38, -6.975, -3.775], [39, -6.975, -0.7249], [40, -8, -0.7249],
             [41, -8, -1.225], [42, -8.975, -1.225], [43, -8.95, -3.725], [44, -8.95, -2.3], [45, -11.95, -2.275],
             [46, -11.95, -3.225], [47, -11.95, -1.15], [48, -11.95, 0.67501], [49, -8.95, 0.35001],
             [50, -7.95, 0.35001], [51, -7.125, 0.35001], [52, -7.075, 2.225], [53, -6.05, 2.225],
             [54, -6.05, 0.325601], [55, -2.975, 0.325601], [56, -2.975, 1.35], [57, -4.95, 1.4], [58, -6.05, -1.45],
             [59, -4.025, -1.45], [60, -4.025, -2.575], [61, -5.875, -2.575], [62, -4.025, -3.72], [63, -2.975, -3.72],
             [64, -2.975, -0.92499], [65, -8.975, 1.825], [66, -9.9, 1.8], [67, -9.9, -0.049992],
             [68, -10.9, -0.049992], [69, -10.9, 1.825], [70, -11.925, 1.825], [71, -11.925, 3.5], [72, -10.9, 2.875],
             [73, -8.925, 2.875], [74, -7.95, 2.85], [75, -8.925, 3.85], [76, -9.9249, 3.85], [77, -10.875, 3.85],
             [78, -10.875, 4.775], [79, -10.875, 7.325], [80, -9.85, 7.325], [81, -9.075, 7.325], [82, -9.075, 8.625],
             [83, -11.9, 8.625], [84, -11.9, 4.775], [85, -7.9, 3.3], [86, -6, 3.3], [87, -6, 6.3], [88, -6.975, 6.3],
             [89, -6.975, 4.475], [90, -7.95, 4.475], [91, -7.95, 5.9], [92, -8.875, 5.9], [93, -6.975, 8.7],
             [94, -8.05, 8.7], [95, -8.05, 7.3], [96, -5.925, 8.7], [97, -5.925, 7.4], [98, -4.95, 7.4],
             [99, -4.95, 8.65], [100, -3, 8.65], [101, -4.05, 7.4], [102, -4.05, 5.45], [103, -3.025, 7.4],
             [104, -3.025, 4.3], [105, -3.025, 2.45], [106, -4.025, 2.45], [107, -4.025, 3.3], [108, -5.05, 4.3],
             [109, -5.05, 6.3], [110, -5.05, 2.35]]

    walls = [[-11.475, -10.675, -11.475, -7.625], [-11.475, -7.625, -9.575, -7.625], [-9.575, -7.625, -9.575, -9.5],
             [-9.575, -9.5, -10.475, -9.5], [-10.475, -9.5, -10.475, -8.575], [-12.4, -6.55, -10.4, -6.55],
             [-9.6, -6.55, -7.7, -6.55], [-7.7, -6.55, -7.7, -7.55], [-8.7, -7.55, -8.7, -9.475],
             [-8.7, -9.475, -6.8249, -9.475], [-6.8249, -9.475, -6.8249, -10.625], [-8.6999, -8.6, -5.7749, -8.6],
             [-6.7999, -8.6, -6.7999, -6.25], [-4.5499, -8.825, -4.5499, -7.8], [-4.5499, -7.8, -5.8499, -7.8],
             [-5.8499, -7.8, -5.8499, -9.675], [-5.8499, -9.675, -3.449, -9.65], [-3.449, -9.65, -3.449, -5.775],
             [-4.5249, -6.95, -5.7499, -6.95], [-5.7499, -6.95, -5.7499, -4.275], [-5.7499, -4.275, -9.4499, -4.275],
             [-9.5249, -4.65, -9.5249, -2.8], [-9.5249, -2.8, -11.55, -2.8], [-11.55, -2.8, -11.55, -5.65],
             [-11.55, -5.65, -8.899, -5.65], [-8.899, -5.65, -8.899, -6.575], [-12.45, -3.775, -11.475, -3.775],
             [-11.525, -4.625, -10.35, -4.625], [-10.35, -4.625, -10.35, -3.75], [-5.7249, -5.25, -7.7249, -5.25],
             [-7.7249, -5.25, -7.7249, -5.65], [-8.399, -3.175, -7.5249, -3.175], [-7.5249, -3.175, -7.5249, -1.225],
             [-11.45, -1.75, -7.4749, -1.75], [-2.3749, -4.475, -4.5749, -4.475], [-4.5749, -5.975, -4.5749, -3.175],
             [-4.5749, -3.175, -6.5999, -3.175], [-6.5999, -3.175, -6.5999, 1.8], [-6.5999, -0.2, -8.4749, -0.2],
             [-8.4749, -0.2, -8.4749, -0.2], [-6.5999, -1.975, -4.5249, -1.975], [-3.4999, -3, -3.4999, -2.2499],
             [-4.4999, -7.4999, -4.4999, -0.1999], [-5.4499, -0.9749, -5.4999, -0.1999],
             [-5.4999, -0.1999, -2.399, -0.1999], [-12.45, 1.2, -11.325, 1.2], [-11.325, 1.2, -11.325, -0.72499],
             [-11.325, -0.72499, -9.4499, -0.72499], [-9.4499, -0.72499, -9.4499, 1.175],
             [-10.375, 0.425, -10.375, 2.275], [-10.375, 2.275, -8.499, 2.275], [-8.499, 2.275, -8.499, 0.825],
             [-12.475, 4.175, -11.425, 4.175], [-11.425, 4.175, -11.425, 2.3], [-11.425, 3.35, -9.375, 3.35],
             [-11.425, 5.257, -11.425, 8.05], [-11.425, 8.05, -9.5, 8.05], [-10.4, 4.45, -10.4, 6.85],
             [-8.6, 9.25, -8.6, 6.4], [-8.6, 6.4, -9.45, 6.4], [-9.45, 6.4, -9.45, 4.425],
             [-9.45, 4.425, -8.475, 4.425], [-8.475, 5.3, -8.475, 3.4], [-8.475, 3.9, -6.475, 3.9],
             [-6.475, 3.9, -6.475, 5.825], [-7.525, 4.975, -7.525, 5.9], [-8.575, 6.85, -7.55, 6.85],
             [-7.55, 6.85, -7.55, 8.2], [-7.6, 0.825, -7.6, 2.725], [-7.6, 2.725, -5.525, 2.725],
             [-3.525, 0.775, -5.5, 0.775], [-5.5, 0.775, -5.5, 6.875], [-2.4, 1.875, -5.5, 1.875],
             [-4.65, 1.875, -4.65, 3.8], [-4.65, 3.8, -3.625, 3.8], [-3.625, 3.8, -3.625, 2.925],
             [-3.65, 6.875, -3.65, 4.95], [-3.65, 4.95, -4.675, 4.95], [-4.675, 4.95, -4.675, 6.85],
             [-4.675, 6.85, -6.4, 6.85], [-6.4, 6.85, -6.4, 8.225], [-5.5, 7.95, -5.5, 9.275],
             [-4.425, 8.1, -2.425, 8.1]]

    travel_edges = []
    # Calculate non-intersecting walls and edges
    for i in range(len(nodes)):
        for j in range(len(nodes)):
            if i != j:
                intersect = 0

                # Check if nodes intersect any walls
                for k in range(len(walls)):
                    p1, p2 = Point(nodes[i][1], nodes[i][2]), Point(nodes[j][1], nodes[j][2]),
                    p3, p4 = Point(walls[k][0], walls[k][1]), Point(walls[k][2], walls[k][3])
                    seg1 = Segment(p1, p2)
                    seg2 = Segment(p3, p4)

                    intersection = seg1.intersection(seg2)
                    '''
                    print(intersection)
                    if intersection:
                        print("Intersection")
                    else:
                        print("No Intersection")
                    '''

                    if intersection:
                        intersect = 1

                if intersect == 0:
                    print("Nodes with no intersection: ", i+1, j+1)

                for l in range(len(travel_edges)):
                    if (travel_edges[l][1] == i and travel_edges[l][2] == j) or (travel_edges[l][1] == j and travel_edges[l][2] == i):
                        intersect = 1

                if intersect == 0:
                    travel_edges.append([len(travel_edges), i+1, j+1])

    with open('edges.txt', 'w') as f:
        f.write(travel_edges)


    sim.simxFinish(clientID)
